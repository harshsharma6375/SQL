-- pl sql
-- PROCEDURERAL SQL
-- FEATURE PROGRAMMING  + SQL 
-- IT IS A EXTENSION FOR SQL , WHICH COMBINES THE CAPABILITY OF SQL AND PROGRAMMING TOGETHER . 
-- WE DO -> ERROR HANLDE 
-- BUSSINESS 
-- EFFCIENY 
--  IT HAS ONLY THREE BLOCKS FOR WORK 
-- 1) DECLARATION BLOCK -> VAIRABLE , CURSOR , USERDEFINED , CONSTANTS (OPTIONAL BLOCK)
-- 2)EXECUTABLE BLOCK  -> WE WRITE DO THE LOGIV AND SQL STATMENT (ALWAYS NEED TO BE WRITEN)T
-- 3)EXECPTION BLOCK -> TO HANDLE THE EXCEPTIONS 

-- DECLARATION  -> DECLARE
-- EXECUTABLE -> BEGIN END 
-- EFFICIENY -> EXECPT 
-- MYSQL -> HAVE LIMITED FEATURE (COMMUNITY EDITION)
-- ORACLE ->(ENTERPRISE EDITION) 

-- PLSQL FEATURE -> 
-- 1) INTERGRATED WITH SQL 
-- 2) MANIPUALTING AND WORKING WITH DATA 
-- 3) REUSABILITY OF CODE 
-- 4) PROTABLE -> SYSTEM TO SYSTEM AND EXECUTABLE 
-- 5) HELP IN  WEB APPLICATION 

-- oracle 11 g database 
-- sql developer(IDE like my sql workbench)



SET SERVEROUTPUT ON;


BEGIN
    DBMS_OUTPUT.PUT_LINE('Test message: Hello!');
END;
/
DECLARE
    var NUMBER := 10;
BEGIN
    var := 20;

    IF var > 5 THEN
        DBMS_OUTPUT.PUT_LINE('hey');
    ELSE
        DBMS_OUTPUT.PUT_LINE('user');
    END IF;

    DBMS_OUTPUT.PUT_LINE(var);        
    DBMS_OUTPUT.PUT_LINE('hello world');
END;

-- Loop
-- DBMS_OUTPUT.PUT_LINE('user' || ' ' || var);
begin 
for i in 1..5 Loop
    DBMS_OUTPUT.PUT_LINE('user' || ' ' || i);
END Loop;
end;





DECLARE
    var NUMBER := 0;
BEGIN
    LOOP
        var := var + 1;
        DBMS_OUTPUT.PUT_LINE('user' || ' ' || var);
        EXIT WHEN var >= 10;
    END LOOP;
END;
/


